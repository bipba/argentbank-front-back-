{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit'; // Importation de la fonction createAction depuis Redux Toolkit\n\n// Définition de l'URL de base pour les appels API vers le backend\nconst baseURL = 'http://localhost:3001/api/v1/user/';\n\n// Création des actions avec Redux Toolkit, qui génèrent des objets d'action avec un type spécifique et un payload\n\n// Action envoyée lorsque la récupération des infos utilisateur réussit\nexport const getUserSuccess = createAction('GET_USER_SUCCESS', user => ({\n  payload: user\n}));\n\n// Action envoyée lorsqu'il y a une erreur lors de la récupération des infos utilisateur\nexport const getUserError = createAction('GET_USER_ERROR', error => ({\n  payload: error\n}));\n\n// Action envoyée pour déconnecter un utilisateur\nexport const logout = createAction('LOGOUT_USER');\n\n// Action envoyée lorsqu'une modification des infos utilisateur démarre (par exemple, modification du nom d'utilisateur)\nexport const editUser = createAction('EDIT_USER');\n\n// Action envoyée lorsque la modification des infos utilisateur réussit\nexport const editUserSuccess = createAction('EDIT_USER_SUCCESS', user => ({\n  payload: user\n}));\n\n// Action envoyée lorsqu'il y a une erreur lors de la modification des infos utilisateur\nexport const editUserError = createAction('EDIT_USER_ERROR', error => ({\n  payload: error\n}));\n\n// Thunk pour charger les informations de l'utilisateur\n// Le thunk permet d'effectuer une action asynchrone, comme un appel API, avant d'envoyer les actions success/fail\nexport const loadUser = token => async dispatch => {\n  // Dispatch d'une action pour indiquer que le chargement des infos utilisateur commence (ici, isLoading est à true)\n  dispatch(getUserSuccess({\n    isLoading: true\n  }));\n  try {\n    // Appel API pour récupérer les informations de l'utilisateur à partir du token d'authentification\n    const response = await fetch(`${baseURL}profile`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        // Indique que les données envoyées sont au format JSON\n        'Authorization': `Bearer ${token}` // Utilisation du token pour l'autorisation\n      }\n    });\n\n    // Vérification de la réponse, si elle n'est pas OK (par exemple, statut HTTP 400 ou 500), une erreur est lancée\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Conversion de la réponse en JSON (le backend retourne probablement les infos utilisateur)\n    const data = await response.json();\n\n    // Dispatch de l'action de succès avec les données utilisateur récupérées et le statut \"connecté\"\n    dispatch(getUserSuccess({\n      user: data,\n      isLoading: false,\n      isLoggedIn: true\n    }));\n\n    // Retourne les données utilisateur (optionnel selon ton besoin dans l'appel du thunk)\n    return data;\n  } catch (error) {\n    // En cas d'erreur, dispatch de l'action d'erreur avec le message d'erreur et mise à jour de l'état pour indiquer l'échec de connexion\n    dispatch(getUserError({\n      error: error.message,\n      isLoading: false,\n      isLoggedIn: false\n    }));\n\n    // Propagation de l'erreur pour permettre de la gérer ailleurs si besoin\n    throw error;\n  }\n};\n\n// Thunk pour modifier le nom d'utilisateur\n// Comme le précédent, il effectue une action asynchrone (mise à jour des infos utilisateur via API)\nexport const EditUser = userName => async dispatch => {\n  // Récupération du token d'authentification stocké dans le localStorage\n  const token = localStorage.getItem('token');\n\n  // Dispatch d'une action pour indiquer que la modification d'utilisateur commence\n  dispatch(editUser());\n  try {\n    // Appel API pour modifier les informations de l'utilisateur\n    const response = await fetch(`${baseURL}profile`, {\n      method: 'PUT',\n      // Méthode PUT utilisée pour modifier des données existantes\n      headers: {\n        'Content-Type': 'application/json',\n        // Les données sont envoyées en JSON\n        'Authorization': `Bearer ${token}` // Le token est ajouté aux headers pour l'autorisation\n      },\n      body: JSON.stringify({\n        userName\n      }) // Envoi du nouveau nom d'utilisateur dans le corps de la requête\n    });\n\n    // Vérification de la réponse, une erreur est lancée si le statut de la réponse n'est pas OK\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Si l'appel API réussit, on récupère les nouvelles informations de l'utilisateur\n    const data = await response.json();\n\n    // Dispatch de l'action indiquant que la modification a réussi avec les nouvelles données utilisateur\n    dispatch(editUserSuccess(data));\n\n    // Rechargement des informations de l'utilisateur pour s'assurer que l'état est à jour\n    dispatch(loadUser(token));\n  } catch (error) {\n    // En cas d'erreur, dispatch de l'action d'erreur avec le message d'erreur\n    dispatch(editUserError(error.message));\n  }\n};","map":{"version":3,"names":["createAction","baseURL","getUserSuccess","user","payload","getUserError","error","logout","editUser","editUserSuccess","editUserError","loadUser","token","dispatch","isLoading","response","fetch","method","headers","ok","Error","status","data","json","isLoggedIn","message","EditUser","userName","localStorage","getItem","body","JSON","stringify"],"sources":["/Users/aa/Desktop/ArgentBank-back-front/frontend/src/store/Actions/UserAction.js"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';  // Importation de la fonction createAction depuis Redux Toolkit\n\n// Définition de l'URL de base pour les appels API vers le backend\nconst baseURL = 'http://localhost:3001/api/v1/user/';\n\n// Création des actions avec Redux Toolkit, qui génèrent des objets d'action avec un type spécifique et un payload\n\n// Action envoyée lorsque la récupération des infos utilisateur réussit\nexport const getUserSuccess = createAction('GET_USER_SUCCESS', (user) => ({ payload: user }));\n\n// Action envoyée lorsqu'il y a une erreur lors de la récupération des infos utilisateur\nexport const getUserError = createAction('GET_USER_ERROR', (error) => ({ payload: error }));\n\n// Action envoyée pour déconnecter un utilisateur\nexport const logout = createAction('LOGOUT_USER');\n\n// Action envoyée lorsqu'une modification des infos utilisateur démarre (par exemple, modification du nom d'utilisateur)\nexport const editUser = createAction('EDIT_USER');\n\n// Action envoyée lorsque la modification des infos utilisateur réussit\nexport const editUserSuccess = createAction('EDIT_USER_SUCCESS', (user) => ({ payload: user }));\n\n// Action envoyée lorsqu'il y a une erreur lors de la modification des infos utilisateur\nexport const editUserError = createAction('EDIT_USER_ERROR', (error) => ({ payload: error }));\n\n// Thunk pour charger les informations de l'utilisateur\n// Le thunk permet d'effectuer une action asynchrone, comme un appel API, avant d'envoyer les actions success/fail\nexport const loadUser = (token) => async (dispatch) => {\n  // Dispatch d'une action pour indiquer que le chargement des infos utilisateur commence (ici, isLoading est à true)\n  dispatch(getUserSuccess({ isLoading: true }));\n\n  try {\n    // Appel API pour récupérer les informations de l'utilisateur à partir du token d'authentification\n    const response = await fetch(`${baseURL}profile`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',  // Indique que les données envoyées sont au format JSON\n        'Authorization': `Bearer ${token}`,  // Utilisation du token pour l'autorisation\n      },\n    });\n\n    // Vérification de la réponse, si elle n'est pas OK (par exemple, statut HTTP 400 ou 500), une erreur est lancée\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Conversion de la réponse en JSON (le backend retourne probablement les infos utilisateur)\n    const data = await response.json();\n\n    // Dispatch de l'action de succès avec les données utilisateur récupérées et le statut \"connecté\"\n    dispatch(getUserSuccess({ user: data, isLoading: false, isLoggedIn: true }));\n\n    // Retourne les données utilisateur (optionnel selon ton besoin dans l'appel du thunk)\n    return data;\n  } catch (error) {\n    // En cas d'erreur, dispatch de l'action d'erreur avec le message d'erreur et mise à jour de l'état pour indiquer l'échec de connexion\n    dispatch(getUserError({ error: error.message, isLoading: false, isLoggedIn: false }));\n    \n    // Propagation de l'erreur pour permettre de la gérer ailleurs si besoin\n    throw error;\n  }\n};\n\n// Thunk pour modifier le nom d'utilisateur\n// Comme le précédent, il effectue une action asynchrone (mise à jour des infos utilisateur via API)\nexport const EditUser = (userName) => async (dispatch) => {\n  // Récupération du token d'authentification stocké dans le localStorage\n  const token = localStorage.getItem('token');\n\n  // Dispatch d'une action pour indiquer que la modification d'utilisateur commence\n  dispatch(editUser());\n\n  try {\n    // Appel API pour modifier les informations de l'utilisateur\n    const response = await fetch(`${baseURL}profile`, {\n      method: 'PUT',  // Méthode PUT utilisée pour modifier des données existantes\n      headers: {\n        'Content-Type': 'application/json',  // Les données sont envoyées en JSON\n        'Authorization': `Bearer ${token}`,  // Le token est ajouté aux headers pour l'autorisation\n      },\n      body: JSON.stringify({ userName }),  // Envoi du nouveau nom d'utilisateur dans le corps de la requête\n    });\n\n    // Vérification de la réponse, une erreur est lancée si le statut de la réponse n'est pas OK\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Si l'appel API réussit, on récupère les nouvelles informations de l'utilisateur\n    const data = await response.json();\n\n    // Dispatch de l'action indiquant que la modification a réussi avec les nouvelles données utilisateur\n    dispatch(editUserSuccess(data));\n\n    // Rechargement des informations de l'utilisateur pour s'assurer que l'état est à jour\n    dispatch(loadUser(token));\n  } catch (error) {\n    // En cas d'erreur, dispatch de l'action d'erreur avec le message d'erreur\n    dispatch(editUserError(error.message));\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}