{"ast":null,"code":"import { getUserSuccess, getUserError, logout, editUser, editUserSuccess, editUserError } from '../Actions/UserAction';\n\n// État initial du reducer\nconst initialStateUser = {\n  isLoading: false,\n  // Indique si une opération est en cours\n  isLoggedIn: false,\n  // Indique si l'utilisateur est connecté\n  user: {},\n  // Contient les informations utilisateur\n  error: '' // Stocke les erreurs éventuelles\n};\n\n// Création du reducer pour gérer les actions utilisateur sans builder\nexport const getUserReducer = (state = initialStateUser, action) => {\n  switch (action.type) {\n    // Cas d'une action réussie pour obtenir les infos utilisateur\n    case getUserSuccess:\n      return {\n        ...state,\n        ...action.payload // Met à jour avec les nouvelles infos (données utilisateur)\n      };\n\n    // Cas d'une erreur lors de l'obtention des infos utilisateur\n    case getUserError:\n      return {\n        ...state,\n        ...action.payload // Met à jour avec les détails de l'erreur\n      };\n\n    // Cas de déconnexion (réinitialisation de l'état à celui par défaut)\n    case logout:\n      return initialStateUser;\n\n    // Cas où l'utilisateur commence à éditer ses infos\n    case editUser:\n      return {\n        ...state,\n        isLoading: true // Indique qu'une opération est en cours\n      };\n\n    // Cas où l'édition des infos utilisateur a réussi\n    case editUserSuccess:\n      return {\n        ...state,\n        isLoading: false,\n        // Fin du chargement\n        user: action.payload,\n        // Mise à jour des infos utilisateur avec les nouvelles données\n        error: '' // Réinitialisation des erreurs\n      };\n\n    // Cas d'une erreur lors de l'édition des infos utilisateur\n    case editUserError:\n      return {\n        ...state,\n        isLoading: false,\n        // Fin du chargement\n        user: {},\n        // Réinitialisation des infos utilisateur en cas d'erreur\n        error: action.payload // Stocke les détails de l'erreur\n      };\n\n    // Si aucune action ne correspond, retourner l'état actuel\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["getUserSuccess","getUserError","logout","editUser","editUserSuccess","editUserError","initialStateUser","isLoading","isLoggedIn","user","error","getUserReducer","state","action","type","payload"],"sources":["/Users/aa/Desktop/ArgentBank-back-front/frontend/src/store/Reducers/UserReducer.js"],"sourcesContent":["import { getUserSuccess, getUserError, logout, editUser, editUserSuccess, editUserError } from '../Actions/UserAction';\n\n// État initial du reducer\nconst initialStateUser = {\n  isLoading: false, // Indique si une opération est en cours\n  isLoggedIn: false, // Indique si l'utilisateur est connecté\n  user: {}, // Contient les informations utilisateur\n  error: '', // Stocke les erreurs éventuelles\n};\n\n// Création du reducer pour gérer les actions utilisateur sans builder\nexport const getUserReducer = (state = initialStateUser, action) => {\n  switch (action.type) {\n\n    // Cas d'une action réussie pour obtenir les infos utilisateur\n    case getUserSuccess:\n      return {\n        ...state,\n        ...action.payload, // Met à jour avec les nouvelles infos (données utilisateur)\n      };\n\n    // Cas d'une erreur lors de l'obtention des infos utilisateur\n    case getUserError:\n      return {\n        ...state,\n        ...action.payload, // Met à jour avec les détails de l'erreur\n      };\n\n    // Cas de déconnexion (réinitialisation de l'état à celui par défaut)\n    case logout:\n      return initialStateUser;\n\n    // Cas où l'utilisateur commence à éditer ses infos\n    case editUser:\n      return {\n        ...state,\n        isLoading: true, // Indique qu'une opération est en cours\n      };\n\n    // Cas où l'édition des infos utilisateur a réussi\n    case editUserSuccess:\n      return {\n        ...state,\n        isLoading: false, // Fin du chargement\n        user: action.payload, // Mise à jour des infos utilisateur avec les nouvelles données\n        error: '', // Réinitialisation des erreurs\n      };\n\n    // Cas d'une erreur lors de l'édition des infos utilisateur\n    case editUserError:\n      return {\n        ...state,\n        isLoading: false, // Fin du chargement\n        user: {}, // Réinitialisation des infos utilisateur en cas d'erreur\n        error: action.payload, // Stocke les détails de l'erreur\n      };\n\n    // Si aucune action ne correspond, retourner l'état actuel\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,YAAY,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,aAAa,QAAQ,uBAAuB;;AAEtH;AACA,MAAMC,gBAAgB,GAAG;EACvBC,SAAS,EAAE,KAAK;EAAE;EAClBC,UAAU,EAAE,KAAK;EAAE;EACnBC,IAAI,EAAE,CAAC,CAAC;EAAE;EACVC,KAAK,EAAE,EAAE,CAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGN,gBAAgB,EAAEO,MAAM,KAAK;EAClE,QAAQA,MAAM,CAACC,IAAI;IAEjB;IACA,KAAKd,cAAc;MACjB,OAAO;QACL,GAAGY,KAAK;QACR,GAAGC,MAAM,CAACE,OAAO,CAAE;MACrB,CAAC;;IAEH;IACA,KAAKd,YAAY;MACf,OAAO;QACL,GAAGW,KAAK;QACR,GAAGC,MAAM,CAACE,OAAO,CAAE;MACrB,CAAC;;IAEH;IACA,KAAKb,MAAM;MACT,OAAOI,gBAAgB;;IAEzB;IACA,KAAKH,QAAQ;MACX,OAAO;QACL,GAAGS,KAAK;QACRL,SAAS,EAAE,IAAI,CAAE;MACnB,CAAC;;IAEH;IACA,KAAKH,eAAe;MAClB,OAAO;QACL,GAAGQ,KAAK;QACRL,SAAS,EAAE,KAAK;QAAE;QAClBE,IAAI,EAAEI,MAAM,CAACE,OAAO;QAAE;QACtBL,KAAK,EAAE,EAAE,CAAE;MACb,CAAC;;IAEH;IACA,KAAKL,aAAa;MAChB,OAAO;QACL,GAAGO,KAAK;QACRL,SAAS,EAAE,KAAK;QAAE;QAClBE,IAAI,EAAE,CAAC,CAAC;QAAE;QACVC,KAAK,EAAEG,MAAM,CAACE,OAAO,CAAE;MACzB,CAAC;;IAEH;IACA;MACE,OAAOH,KAAK;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}